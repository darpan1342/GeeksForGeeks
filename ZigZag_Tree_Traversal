import java.util.*;
import java.util.HashMap;
    class Node
    {
        int data;
        Node left,right;
        Node(int d) {data = d; left =right= null; }
    }
		
public class GFG2
{
	public static void inorder(Node root)
	{
	    if(root==null)
	    return;
	    inorder(root.left);
	    System.out.print(root.data);
	    inorder(root.right);
	}
     /* Drier program to test above functions */
    public static void main(String args[])
    {
         Scanner sc = new Scanner(System.in);
		 int t=sc.nextInt();
		 
		 while(t-->0){
			int n = sc.nextInt();
			GFG2 llist=new GFG2();
			Node root=null,parent=null;
			HashMap<Integer, Node> m = new HashMap<>();
            for(int i=0;i<n;i++)
            {
                int a=sc.nextInt();
                int b=sc.nextInt();
                char c=sc.next().charAt(0);
                if(m.containsKey(a)==false)
                {
                    parent=new Node(a);
                    m.put(a,parent);
                    if(root==null)
                    root=parent;
                }
                else
                    parent=m.get(a);
                Node child=new Node(b);
                if(c=='L')
                parent.left=child;
                else
                parent.right=child;
                m.put(b,child);
            }
            GFG obj = new GFG();
            obj.zigZagTraversal(root);
            System.out.println();
		}
	}
}


/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

//User function Template for Java
/*class Node
{
    int data;
    Node left,right;
    Node(int d)
    {
        data=d;
        left=right=null;
    }
}*/
// Print the zig zag traversal of tree.
class GFG
{
	void zigZagTraversal(Node root)
	{
	    //Add your code here.
	    if(root == null)
	    {
	        return;
	    }
	    Stack<Node> s1 = new Stack<Node>();
	    Stack<Node> s2 = new Stack<Node>();
	    s1.push(root);
	    while(!s1.empty() || !s2.empty())
	    {
	        while (!s1.empty()) 
			{ 
				Node temp = s1.peek(); 
				s1.pop(); 
				System.out.print(temp.data + " "); 
				if (temp.left != null) 
					s2.push(temp.left); 
				if (temp.right != null) 
					s2.push(temp.right); 
				
			} 
			while (!s2.empty()) 
			{ 
				Node temp = s2.peek(); 
				s2.pop(); 
				System.out.print(temp.data + " "); 
				if (temp.right != null) 
					s1.push(temp.right); 
				if (temp.left != null) 
					s1.push(temp.left); 
			} 
	    }
	}
}
